---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "quay-obj-backup.fullname" . }}-scripts
  namespace: {{ .Values.backupNamespace }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
data:
  env.quayNamespace: {{ .Values.quayNamespace }}
  env.fileprefix: quayObjBackup
  env.retention: {{ .Values.retentionDays | quote }}
  quayObjBackup.sh: |
    #!/bin/bash

    log_message() {
      local timestamp
      timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      echo -e "$timestamp $1"
    }

    if ! qreg=$( kubectl get quayregistry -n "$QUAYNAMESPACE" -o jsonpath='{.items[].metadata.name}' 2>/dev/null ); then 
      log_message "ERROR: no quayregistry deployed in provided namespace $QUAYNAMESPACE."
      exit 1
    fi

    if ! qpod=$( kubectl get pods -n "$QUAYNAMESPACE" -l app=quay -o jsonpath='{.items[0].metadata.name}' ); then
      log_message "ERROR: cannot find any quay pod in namespace $QUAYNAMESPACE."
      exit 1
    fi

    kubectl get quayregistry $qreg -n "$QUAYNAMESPACE" -o yaml 2>/dev/shm/out.err | yq 'del(.status,.metadata.creationTimestamp,.metadata.finalizers,.metadata.resourceVersion,.metadata.uid,.metadata.generation)' > /backup/quay-registry.yaml
    if [ -s /dev/shm/out.err ]; then
      log_message "ERROR: $(cat /dev/shm/out.err)"
      exit 1
    fi

    kubectl get secret -n "$QUAYNAMESPACE" ${qreg}-quay-registry-managed-secret-keys -o yaml 2>/dev/shm/out.err | yq 'del(.metadata.ownerReferences)' > /backup/managed-secret-keys.yaml
    if [ -s /dev/shm/out.err ]; then
      log_message "ERROR: $(cat /dev/shm/out.err)"
      exit 1
    fi

    kubectl get secret -n "$QUAYNAMESPACE" $(kubectl get quayregistry $qreg -n "$QUAYNAMESPACE" -o jsonpath='{.spec.configBundleSecret}') -o yaml 2>/dev/shm/out.err > /backup/config-bundle.yaml
    if [ -s /dev/shm/out.err ]; then
      log_message "ERROR: $(cat /dev/shm/out.err)"
      exit 1
    fi

    kubectl exec $qpod -n "$QUAYNAMESPACE" -- cat /conf/stack/config.yaml 2>/dev/shm/out.err > /backup/quay-config.yaml
    if [ -s /dev/shm/out.err ]; then
      log_message "ERROR: $(cat /dev/shm/out.err)"
      exit 1
    fi

    if ! tar -czf /backup/quayObjBackup-$(date +%Y%m%d%H%M%S).tgz /backup/*yaml; then 
      log_message "ERROR: Cannot create backup archive."
      exit 1
    fi

  s3upload.sh: |
    #!/bin/bash

    log_message() {
      local timestamp
      timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      echo -e "$timestamp $1"
    }

    log_messagef() {
      while read -r line; do
        log_message "$line"
      done < $1
    }

    # check snapshot file
    SNAPSHOT_FILE=$(find /backup -type f -mmin -30 -name "${FILEPREFIX}*" | sort | tail -1)
    if ! test -r "$SNAPSHOT_FILE"; then
      log_message "ERROR: Failed to locate a valid snapshot file."
      exit 1
    fi

    # setup aws env variables
    export AWS_REQUEST_CHECKSUM_CALCULATION=when_required
    export AWS_RESPONSE_CHECKSUM_VALIDATION=when_required
    export AWS_ENDPOINT_URL="https://${BUCKET_HOST}:${BUCKET_PORT}"

    # upload backup to s3 bucket
    if ! aws s3 cp "$SNAPSHOT_FILE" "s3://$BUCKET_NAME" --no-progress 2>/dev/shm/out.err 1>/dev/null; then
      log_messagef /dev/shm/out.err
      log_message "ERROR: Failed to upload $(basename "$SNAPSHOT_FILE") to s3://$BUCKET_NAME "
      exit 2
    fi

    if ! aws s3api head-object --bucket "$BUCKET_NAME" --key $(basename "$SNAPSHOT_FILE") 2>/dev/shm/out.err 1>/dev/null; then
      log_messagef /dev/shm/out.err
      log_message "ERROR: Unable to verify uploaded object s3://${BUCKET_NAME}/$(basename "$SNAPSHOT_FILE")"
      exit 2
    fi

    log_message "Snapshot has been uploaded to s3://${BUCKET_NAME}/$(basename "$SNAPSHOT_FILE")"

    # run cleanup
    if ! expr "$RETENTION" : '^[0-9]\+$' 2>/dev/shm/out.err 1>/dev/null; then
      log_messagef /dev/shm/out.err
      log_message "ERROR: Value for retention is not a valid integer"
      exit 1
    fi

    if ! RETENTION_DATE=$( date -u --date="${RETENTION} days ago" +"%Y-%m-%dT%H:%M:%SZ" 2>/dev/shm/out.err ); then
      log_messagef /dev/shm/out.err
      log_message "ERROR: Faield to set a retention date"
      exit 1
    fi

    if ! aws s3api list-objects-v2 --bucket $BUCKET_NAME --query "Contents[?LastModified<='$RETENTION_DATE'].{Key: Key} | {Objects: [*]}" 2>/dev/shm/out.err 1>/backup/delete.json; then
      log_messagef /dev/shm/out.err
      log_message "ERROR: Failed to generate a list of objects to delete"
      exit 1
    fi

    log_message "INFO: listing content of backup bucket $BUCKET_NAME"
    aws s3api list-objects-v2 --bucket $BUCKET_NAME

    if grep -qE '"Objects":\s*\[\s*\]' /backup/delete.json; then
      log_message "No objects older than $RETENTION days found - skipping cleanup."
      exit 0
    fi

    log_message "Removing obejcts older than $RETENTION days:"
    if ! aws s3api delete-objects --bucket $BUCKET_NAME --delete file:///backup/delete.json --output text >/dev/shm/out 2>&1; then
      log_messagef /dev/shm/out
      log_message "ERROR: Failed to remove objects."
      exit 1
    fi

    log_messagef /dev/shm/out
    log_message "Cleanup complete."
    exit 0
